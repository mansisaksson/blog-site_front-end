---------- TODO ----------
[ ] Re-work CSS
	[ ] Front page
	[ ] Blog viewer
	
[ ] Add Author information in the left sidebar when displaying a blog-post

[ ] Improve/remove chapter title, also, should chapters in the blog-viewer be the same as in the editor
e.g. not on the same page?

[ ] User Page, visit a single users page.

[ ] Blog query
	[ ] Sort by
	[ ] Search by name

[ ] Change parameters to express model e.g. "/files/:fileId"

[ ] Remove GET'/api/stories/query' and merge it with GET'/api/stories'


---------- DONE ----------
[x] Add padding under text editor so that text is not at the bottom of the screen while typing

[x] Improve formatting on post description

[x] Display author name on stories

[x] Add a registration key

[x] Clear story cache on login

[x] We get hundreds of duplicate requests for "localhost:3000/api/stories/query?userId=undefined&searchQuery=undefined"
when opening the story viewer

[x] Allow chapter re-ordering

[x] Ctrl + S in editor to save

[x] Better Message service

[x] Fix refresh issue on appache.

[x] Centered images are not saved

[x] Layout/Navigation Re-work
	[x] User Settings Page
	[x] Improve the story viewer (looks like shit)
	[x] Hide Left sidebar when not used

[x] Editor sidebar navigator
	[x] Display chapters
	[-] Display document preview

[-] Use multipart or JSON for sending files?
There are two main patterns for sending data between client and server, one is through Form Data,
which is quite an old standard, and the other is to format it using something like JSON and then parse it on the server.
The problem with sending everything as JSON is that the size of serialized binary data is larger than if it were sent by
multipart form data, as form data has a special property for handling file transfer and is therefor quite efficiant at doing so.

The upside of using JSON is that I keep the code simple. Keeping all communication as JSON also gives a higher degree of flexibility
if I were, for example, to switch transfer protocol, or were to allow communication from a non browser source. (eg. a game or a login server).

CONCLUSION: Using multipart form data for this project does not make any sense. Better to commit to JSON.

[x] User management
	[x] Edit User Name
	[x] Edit password
	[x] Delete User

[x] User Cache
	[x] Cache current user
	[x] Time-out when session ends
	[x] Re-validate session periodically

[x] Fix fake backend or remove if no longer desired

[x] Don't send duplicate requests 
	-	If we've already sent a request for something then we should not send another one before we've received a response
	[x] Create anti-duplicate system
	[x] Implement on all requests

[x] Cache Stories
	[x] Cache Story Meta data
	[x] Cache Chapter
	[x] Cache Content
	[x] Cache Search Queries
	[x] Cache Time-out

[x] Edit story/chapter meta data
	[x] Edit title

[x] Create new chapter is broken

[x] Implement server backend
	[x] Migrate to MongoDB

[x] Add chapter
	[x] Need to be able to swap current chapter in editor

[x] Misc nav stuff
	[x] Need a reusable pop-up form
	[x] Delete story should re-direct to home
	[x] Create story sould ask for a title
	[x] Sign out should re-direct to home

[x] Story Editor
	[x] Save changes
	[x] HTML title parser

[x] Quill stores documents in deltas, this can be used to track edits.
	[x] Store deltas instead of documents

[x] Make story viewer display documents correctly

[x] Figure out how to show/hide the side menu buttons

[x] Layout changes
	[x] Add hamburger menu
	[x] Add right sidebar
	[x] Add "Create  Story" to this sidebar
	[x] Add Delete Story button
	[x] Add Edit Story button

[x] Create "With Logged In User" Service, (pop modal if user needs to log in)

[x] Implement stories using the fake backend.
	[x] List stories (story page)
	[x] View story.
	[x] My Stories.

[x] Login on this site.
	[x] Copy login from example project
	
[x] Clean project (remove unused stuff)

[x] Setup server to support multiple web-pages
	[x] Make sure all scripts return Json
	[x] Fix up file-management-site to work with the returned JSON
	[-] Migrate to MongoDB?

[x] List stories on the main page

[x] Mock up a story page
	[x] Story editor
		[x] Implement Quill
		[-] Look at substance (Used  Quill instead)

[x] Mock up a main page where stories are listed
	[x] List all available stories
	[x] Press the story link and enter the story viewer

[x] Tools for creating a story

---- Minimum before publish
	[x] Story public/private flag so it can be worked on before it gets published
	[x] Use quill editor to render quill content (render library did not work well)
	[x] Thumbnails
	[x] Story description